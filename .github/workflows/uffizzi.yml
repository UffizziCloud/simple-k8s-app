name: Manage UffizziCluster for Pull Requests

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
    branches: [ main ]

env:
  # These are all temporary for this proof-of-concept.
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: uffizzi-client-clone-1    # Add your cluster name here.
  GKE_ZONE: us-central1   # Add your cluster zone here.
  #USE_GKE_GCLOUD_AUTH_PLUGIN: true
  # Once finished, this workflow will include Uffizzi credentials instead of GCP.

  # In practice, clusters will probably get a unique ID and the workflow will identify them using metadata.
  UCLUSTER_NAME: cluster-${{ github.run_id }}
  PR_NUMBER: ${{ github.event.number }}

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Generate UUID image name
      id: uuid
      run: echo "UUID_RESULT=$(uuidgen)" >> $GITHUB_ENV
    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        # An anonymous, emphemeral registry built on ttl.sh
        images: registry.uffizzi.com/${{ env.UUID_RESULT }}
        tags: type=raw,value=24h
    - name: Build and Push Image to Uffizzi Ephemeral Registry
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        context: .

  create-uffizzi-cluster:
    name: Manage Uffizzi Cluster
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up `gcloud` CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Get credentials to connect to host GKE Cluster
      run: |-
        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${PROJECT_ID}

    - name: uffizzi cluster create
      if: ${{ endsWith(github.event.action, 'opened') }} # "opened" or "reopened"
      run: |-
        envsubst < uffizzi-cluster.template.yaml > uffizzi-cluster.rendered.yaml
        cat uffizzi-cluster.rendered.yaml #debug
        kubectl apply -f uffizzi-cluster.rendered.yaml
        # do not exit upon any non-zero exit status (for `until` loop below.)
        set +e
        # wait for secret to exist!
        READY=1
        until [ $READY -eq 0 ]; do kubectl get secret vc-uc-${UCLUSTER_NAME} --namespace ${UCLUSTER_NAME}; READY=$?; sleep 10; done
        set -e
        # fetch and decode kubeconfig
        kubectl get secret vc-uc-${UCLUSTER_NAME} --namespace ${UCLUSTER_NAME} --output=jsonpath='{.data.config}' | base64 --decode > /tmp/${UCLUSTER_NAME}.kubeconfig
        # TODO: deploy sample app
        kubectl --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig get namespace
        helm --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig list
        REPOSITORY=`echo ${{ needs.build.outputs.tags }} | cut -f1 -d':'`
        TAG=`echo ${{ needs.build.outputs.tags }} | cut -f2 -d':'`
        helm install github-actions ./chart --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig --set image.repository=${REPOSITORY} --set image.tag=${TAG}
        helm --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig list
        # YOLO
        kubectl get secret vc-uc-${UCLUSTER_NAME} --namespace ${UCLUSTER_NAME} --output=jsonpath='{.data.config}' | base64 --decode

    - name: uffizzi cluster connect
      if: ${{ github.event.action == 'synchronize' }}
      run: |-
        export UCLUSTER_NAME=`kubectl get namespace --selector="github.com/pull_request.number=${PR_NUMBER}" --output=jsonpath='{.items[*].metadata.name}'`
        echo ${UCLUSTER_NAME} identified
        envsubst < uffizzi-cluster.template.yaml > uffizzi-cluster.rendered.yaml
        cat uffizzi-cluster.rendered.yaml #debug
        #kubectl apply -f uffizzi-cluster.rendered.yaml
        # fetch and decode kubeconfig
        kubectl get secret vc-uc-${UCLUSTER_NAME} --namespace ${UCLUSTER_NAME} --output=jsonpath='{.data.config}' | base64 --decode > /tmp/${UCLUSTER_NAME}.kubeconfig
        kubectl --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig get namespace
        # TODO: re-deploy sample app
        helm --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig list
        helm upgrade github-actions ./chart --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig --set image.repository=${REPOSITORY} --set image.tag=${TAG}
        helm --kubeconfig /tmp/${UCLUSTER_NAME}.kubeconfig list

    - name: uffizzi cluster delete
      if: ${{ github.event.action == 'closed' }}
      run: |-
        export UCLUSTER_NAME=`kubectl get namespace --selector="github.com/pull_request.number=${PR_NUMBER}" --output=jsonpath='{.items[*].metadata.name}'`
        echo ${UCLUSTER_NAME} identified
        kubectl delete namespace ${UCLUSTER_NAME}
